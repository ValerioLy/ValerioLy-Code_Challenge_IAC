---
- name: Install docker on a Centos 7 machine
  hosts: servers
  become: yes
  tasks:
    - block:
        - parted: device=/dev/sda2 unit=GiB
          register: sda2_info
        - debug:
            msg: '{{ sda2_info.disk.size }}'
        - debug:
            msg: "{{ sda2_info.disk.size }} greater than 40"
          when: " sda2_info.disk.size  > 40"
        - debug:
            msg: "{{ sda2_info.disk.size }} less than 40"
          when: " sda2_info.disk.size  < 40"
    - name: Install pre-requisite packages
      yum:
        name: "{{item}}"
        state: latest
      loop:
      - yum-utils
      - device-mapper-persistent-data
      - lvm2
    - name: Add Docker CE repo
      get_url:
       url: https://download.docker.com/linux/centos/docker-ce.repo
       dest: /etc/yum.repos.d/docker-ce.repo
    - name: Install Docker
      yum: name=docker-ce state=latest
    - name: Start and enable the Docker daemon
      service: name=docker state=started enabled=yes
    - name: Expose Api
      lineinfile: 
        path: /lib/systemd/system/docker.service 
        regexp: '^(.*)ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock(.*)$' 
        line: 'ExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:4243 --containerd=/run/containerd/containerd.sock'
        backrefs: yes
    - name: Reload Port Api
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: yes
        name: docker
    - name: Verify Api Connection
      shell: ps -ef|grep docker
      register: output
    - debug: msg="{{ output.stdout }}"
    - name: Install firewalld
      yum:
        name: firewalld
        state: latest
      notify:
        - start firewalld
    - name: start firewalld
      service:
        name: firewalld
        state: started
        enabled: yes
      become: yes
    - name: enable 2376
      firewalld:
        zone: public
        port: "{{item}}"
        permanent: true
        state: enabled
      become: yes
      loop:
      - 2376/tcp
      - 2377/tcp
      - 7946/tcp
      - 80/tcp
      - 7946/udp
      - 4789/udp
    - name: reload service firewalld
      systemd:
        name: firewalld
        state: reloaded
- name: Swarm on Master Node
  hosts: localhost
  connection: local
  become: true
  vars:
    ansible_python_interpreter: /bin/python3
  tasks:
    - name: Install pre-requisite packages
      apt:
        name: docker
        state: latest
    - name: Start and enable the Docker daemon
      service: name=docker state=started enabled=yes
    - name: Install Firewall
      apt:
        name: ufw
        state: latest
    - name: Port Enable Firewall TCP
      ufw:
        rule: allow
        port: "{{item}}"
        proto: tcp
      loop:
      - "2376"
      - "2377"
      - "7946"
      - "80"
      - "22"
    - name: Port Enable Firewall UDP
      ufw:
        rule: allow
        port: "{{item}}"
        proto: udp
      loop:
      - "7946"
      - "4789"
    - name: Enable Firewall daemon
      ufw:
        state: enabled
    - name: Reload Firewall daemon
      ufw:
        state: reloaded
    - name: save in variable ipv4 advertise_addr
      shell: ip addr list eth9 |grep "inet " |cut -d' ' -f6|cut -d/ -f1
      register: adv
    - debug: msg="{{ adv.stdout }}"
    - name: Init Master Node 
      docker_swarm:
        state: present 
        advertise_addr: "{{adv.stdout}}"
    - name: Check Node
      shell: docker node ls
      register: output
    - debug: msg="{{ output.stdout }}"
    - name: check info 
      shell: docker info
      register: output
    - debug: msg="{{ output.stdout }}"
    - name: get token
      shell: docker swarm join-token manager
      register: token
    - debug: msg="{{token.stdout}}"
    - name: Register masternode with variable
      add_host:
       name: "masternode"
       token_NEW: " {{ token.stdout }}"
- name: Join Swarm by Token from Nodes
  hosts: servers
  become: yes
  tasks:
    - name: join node to swarm cluster
      shell: docker swarm join --token "{{ hostvars['masternode']['token_NEW'] }}" 192.168.33.1:2377
- name: Deploy Service Swarm on Master Node
  hosts: localhost
  connection: local
  become: true
  vars:
    ansible_python_interpreter: /bin/python3
  tasks:
    - name: Deploy Service from local machine 
      shell: docker service create -p 80:80 --name webservice --replicas 2 nginx
    - name: show service state
      shell: docker service ps webservice
      register: ps
    - debug: msg="{{ ps.stdout }}"
    - name: verify server1 works normally
      shell: curl {{ hostvars[groups['servers'][0]].ansible_host }}
      register: s1
    - debug: msg="{{ s1.stdout }}"
    - name: verify server2 works normally
      shell: curl {{ hostvars[groups['servers'][1]].ansible_host }}
      register: s2
    - debug: msg="{{ s2.stdout }}"

    
